name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggering for hackathon testing

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci
    
    - name: Install React Native dependencies
      run: |
        cd smarties
        npm ci
    
    - name: Run linting
      run: |
        cd smarties
        npm run lint
    
    - name: Run unit tests
      run: |
        cd smarties
        npm run test:ci
      env:
        CI: true
    
    - name: Run integration tests
      run: |
        cd smarties
        npm run test:integration
      env:
        CI: true
        # Integration test environment variables
        MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING_TEST }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./smarties/coverage
        fail_ci_if_error: false # Don't fail CI for coverage upload issues during hackathon
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always() # Upload even if tests fail
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          smarties/coverage/
          smarties/test-results.xml
        retention-days: 7
    
    - name: Check TypeScript
      run: |
        cd smarties
        npx tsc --noEmit

  build-android:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Install dependencies
      run: |
        cd smarties
        npm ci
    
    - name: Build Android
      run: |
        cd smarties
        npx expo export --platform android
        # Alternative: npx expo build:android for full APK build
    
    - name: Upload Android build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-build
        path: smarties/dist/
        retention-days: 7 # Keep artifacts for a week during hackathon
    
  build-ios:
    runs-on: macos-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd smarties
        npm ci
    
    - name: Build iOS
      run: |
        cd smarties
        npx expo export --platform ios
        # Alternative: npx expo build:ios for full IPA build
    
    - name: Upload iOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: smarties/dist/
        retention-days: 7 # Keep artifacts for a week during hackathon

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd smarties
        npm ci
    
    - name: Run cloud service integration tests
      run: |
        cd smarties
        npm run test:integration:cloud
      env:
        CI: true
        MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING_TEST }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          smarties/integration-test-results.xml
          smarties/integration-coverage/
        retention-days: 7

  notify:
    runs-on: ubuntu-latest
    needs: [test, build-android, build-ios, integration-tests]
    if: always() # Run even if previous jobs fail
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build-android.result }}" == "success" && "${{ needs.build-ios.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ All tests and builds completed successfully!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Some tests or builds failed. Check the logs above." >> $GITHUB_OUTPUT
        fi
    
    - name: Create test summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Android Build | ${{ needs.build-android.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| iOS Build | ${{ needs.build-ios.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Generate detailed test summary
      if: always()
      run: |
        echo "## Detailed Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "### ✅ Unit Tests - PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- All unit tests executed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Code coverage reports generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Unit Tests - FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- Some unit tests failed" >> $GITHUB_STEP_SUMMARY
          echo "- Check the test logs for details" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "### ✅ Integration Tests - PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- Cloud service integrations working" >> $GITHUB_STEP_SUMMARY
          echo "- MongoDB Atlas connectivity verified" >> $GITHUB_STEP_SUMMARY
          echo "- AI services responding correctly" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Integration Tests - FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- Cloud service integration issues detected" >> $GITHUB_STEP_SUMMARY
          echo "- Check service configurations and API keys" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Build Status" >> $GITHUB_STEP_SUMMARY
        echo "- Android Build: ${{ needs.build-android.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- iOS Build: ${{ needs.build-ios.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Test results and coverage reports are available in the Actions artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Build artifacts are retained for 7 days" >> $GITHUB_STEP_SUMMARY
    
    - name: Comment on PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const testStatus = '${{ needs.test.result }}';
          const integrationStatus = '${{ needs.integration-tests.result }}';
          const androidStatus = '${{ needs.build-android.result }}';
          const iosStatus = '${{ needs.build-ios.result }}';
          
          const getStatusEmoji = (status) => status === 'success' ? '✅' : '❌';
          
          const comment = `## 🧪 Test Results Summary
          
          | Test Type | Status | Result |
          |-----------|--------|--------|
          | Unit Tests | ${getStatusEmoji(testStatus)} | ${testStatus.toUpperCase()} |
          | Integration Tests | ${getStatusEmoji(integrationStatus)} | ${integrationStatus.toUpperCase()} |
          | Android Build | ${getStatusEmoji(androidStatus)} | ${androidStatus.toUpperCase()} |
          | iOS Build | ${getStatusEmoji(iosStatus)} | ${iosStatus.toUpperCase()} |
          
          ${testStatus === 'success' && integrationStatus === 'success' && androidStatus === 'success' && iosStatus === 'success' 
            ? '🎉 All tests and builds passed! Ready for review.' 
            : '⚠️ Some tests or builds failed. Please check the details above.'}
          
          📊 **Coverage reports** and **test artifacts** are available in the Actions tab.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Notify on failure
      if: steps.status.outputs.status == 'failure'
      run: |
        echo "${{ steps.status.outputs.message }}"
        exit 1