name: SMARTIES CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore SMARTIES.sln
    
    - name: Build solution
      run: dotnet build SMARTIES.sln --no-restore --configuration Release
    
    - name: Run unit tests
      run: dotnet test SMARTIES.MAUI.Tests/SMARTIES.MAUI.Tests.csproj --no-build --configuration Release --logger trx --collect:"XPlat Code Coverage"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/*.trx
          **/coverage.cobertura.xml
        retention-days: 7
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: '**/coverage.cobertura.xml'
        fail_ci_if_error: false

  build-android:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Install MAUI workload
      run: dotnet workload install maui
    
    - name: Restore dependencies
      run: dotnet restore SMARTIES.MAUI/SMARTIES.MAUI.csproj
    
    - name: Build Android
      run: dotnet build SMARTIES.MAUI/SMARTIES.MAUI.csproj -f net8.0-android --configuration Release --no-restore
    
    - name: Upload Android build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-build
        path: SMARTIES.MAUI/bin/Release/net8.0-android/
        retention-days: 7

  build-ios:
    runs-on: macos-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Install MAUI workload
      run: dotnet workload install maui
    
    - name: Restore dependencies
      run: dotnet restore SMARTIES.MAUI/SMARTIES.MAUI.csproj
    
    - name: Build iOS (unsigned)
      run: dotnet build SMARTIES.MAUI/SMARTIES.MAUI.csproj -f net8.0-ios --configuration Release --no-restore
    
    - name: Upload iOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: SMARTIES.MAUI/bin/Release/net8.0-ios/
        retention-days: 7

  build-windows:
    runs-on: windows-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Install MAUI workload
      run: dotnet workload install maui
    
    - name: Restore dependencies
      run: dotnet restore SMARTIES.MAUI/SMARTIES.MAUI.csproj
    
    - name: Build Windows
      run: dotnet build SMARTIES.MAUI/SMARTIES.MAUI.csproj -f net8.0-windows10.0.19041.0 --configuration Release --no-restore
    
    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: SMARTIES.MAUI/bin/Release/net8.0-windows10.0.19041.0/
        retention-days: 7

  notify:
    runs-on: ubuntu-latest
    needs: [test, build-android, build-ios, build-windows]
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build-android.result }}" == "success" && "${{ needs.build-ios.result }}" == "success" && "${{ needs.build-windows.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ All tests and builds completed successfully!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Some tests or builds failed. Check the logs above." >> $GITHUB_OUTPUT
        fi
    
    - name: Create build summary
      run: |
        echo "## SMARTIES Build Results" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Android | ${{ needs.build-android.result == 'success' && '✅ Built' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| iOS | ${{ needs.build-ios.result == 'success' && '✅ Built' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Windows | ${{ needs.build-windows.result == 'success' && '✅ Built' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 Platform Support" >> $GITHUB_STEP_SUMMARY
        echo "- **Android**: Cross-platform barcode scanning and dietary analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **iOS**: Build validation (requires Apple Developer account for device testing)" >> $GITHUB_STEP_SUMMARY
        echo "- **Windows**: Desktop version for development and testing" >> $GITHUB_STEP_SUMMARY
    
    - name: Comment on PR with build results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const testStatus = '${{ needs.test.result }}';
          const androidStatus = '${{ needs.build-android.result }}';
          const iosStatus = '${{ needs.build-ios.result }}';
          const windowsStatus = '${{ needs.build-windows.result }}';
          
          const getStatusEmoji = (status) => status === 'success' ? '✅' : '❌';
          
          const comment = `## 📱 SMARTIES Build Results
          
          | Platform | Status | Result |
          |----------|--------|--------|
          | Unit Tests | ${getStatusEmoji(testStatus)} | ${testStatus.toUpperCase()} |
          | Android | ${getStatusEmoji(androidStatus)} | ${androidStatus.toUpperCase()} |
          | iOS | ${getStatusEmoji(iosStatus)} | ${iosStatus.toUpperCase()} |
          | Windows | ${getStatusEmoji(windowsStatus)} | ${windowsStatus.toUpperCase()} |
          
          ${testStatus === 'success' && androidStatus === 'success' && iosStatus === 'success' && windowsStatus === 'success'
            ? '🎉 All platforms built successfully! SMARTIES is ready for cross-platform deployment.' 
            : '⚠️ Some builds failed. Please check the platform-specific logs above.'}
          
          ### 📋 Next Steps
          ${iosStatus === 'success' 
            ? '- ✅ iOS build validated - ready for Apple Developer account setup'
            : '- ❌ iOS build needs attention before device testing'}
          - 📦 Build artifacts are available for download in the Actions tab
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Notify on failure
      if: steps.status.outputs.status == 'failure'
      run: |
        echo "${{ steps.status.outputs.message }}"
        exit 1